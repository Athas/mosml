			   Ken Friis Larsen 31/3, 1/4, 2/4, 3/4 - 2000

Note about the PM prototype
---------------------------

* Getting started.
  Compile the source with the command
  mosmlc -c -toplevel Parser-sig.sml Parser.sml PMBasic.sml PMCompile.sml
  Now from the toplevel invoke the function 
  PMCompile.compile "sources.pm"

  (app load ["Mosml", "PMCompile"]; 
   FileSys.chDir "/home/kfl/programming/ml/mlkit.mosml/kit/src";
   PMCompile.compile "sources.pm";
   PMCompile.link ["-o moskit "] "sources.pm";


* Everything managed by pm is compiled with the command
	mosmlc -c -toplevel context1 ... contextM file1 ... fileN
  where file1 to fileN are .sml files and context1 to contextM are .ui
  files.  (This is the general case in compileBodyOpt, in compileBody
  N=1.  I thought compileBodyOpt would gain some speed but that does
  not seem to be the case)

* PMCompile.compilePM returns the context obtained from a pmfile
  data structure.

* All filenames are transformed to be fullpath'ed

* Changes made to the kit 
  + Parsing/Topdec.grm.sig renamed to Parsing/Topdec.grm.sig.sml (also
    in Common/common.pm) 
  + Order of constructures changed in Common/SCon.sml 
  + Order of constructures changed in Common/PrettyPrint.sml 
  + changed substring to String.substring in Parsing/Topdec.lex.sml
  + Changed Word32 to Word in Compiler/Backend/
    {CLOS_EXP.sig,ClosExp.sml,LINE_STMT.sml,LineStmt.sml,BACKEND_INFO.sml,
     CalcOffset.sml,HpPaRisc/BackendInfo.sml,HpPaRisc/CodeGen.sml}
    can easy be reverted by replaceing (*Word32*)Word with Word32
  + Order of constructures changed in Compiler/Lambda/CompilerEnv.sml
  + Order of constructures changed in Compiler/Kam/CompLambEnv.sml
  + Order of constructures changed in Compiler/Cfg/CfgInst.sml
  + Changed `Int.toString status' to `"0"' on line 128 in
    Manager/ManagerObjects.sml
  + Renamed Edlib/List.uo Edlib/edList.uo
  + Renamed Edlib/ListPair.uo Edlib/edListPair.uo
  + Renamed Common/BasicIO.sml Common/comBasicIO.sml

  Changed back these (and changed mosml instead)
  * Lots of "IO." commented out in Common/Flags.sml 
  * Changed IO.Io to Io in Compiler/Backend/HpPaRisc/CodeGen.sml
  * Changed IO.Io to Io in Manager/{IntModules.sml,ParserElab.sml,
    Manager.sml}
  * Commented out lots of "OS." in
    Common/EfficientElab/ModuleEnvironment.sml
  * Commented out lots of "OS." in Common/KitCompiler.sml
  * Commented out "OS." in Manager/{IntModules.sml,ManagerObjects.sml,
    Manager.sml}

  
  Most of these errors can be boiled down to:
  + Mosml's basic library should be updated now that nested structures
    are allowed. For the Kit especially the OS structure sould be
    extended, and the Io exception should be in the IO structure.
  + The order of constructures in datatype declarations matters. 
  + We need a way to rename a compilation unit


* After I have implemented the findFiles functions, I realize that the
  Right Way to handle the pm files is to build a graph representation
  from them.  This will also make it easy to check that the pm files
  don't contains cycles (we just check that the graph is a DAG).

* Locals might be handled wrong when things are linked, because
  compilation unit renaming is not supported.

* 3/4- 2000: Smarter recompilation implemented.  Broke compileBodyOpt
  doing this, but who cares.
  BUG: .pm files are not considered in the uptodate check.

TODO ( - : not implemented, + : implemented, * : droped ) 
  - Implement compilation unit renaming when mosmlc supports it
  - Figure out how to handle .sig files
  - Reimplement using graph data structure
  + Implement smart recompilation.  That is, don't recompile if the
    context and the .u? files are up to date. (This might also be
    easier, if we had a graph.  But on the other hand Holmake seems to
    do fine without one)
  - Make everything robust wrt missing files, syntax errors in pm
    files, etc.
  - Testing, testing, testing.  Lots of test done in the interactive
    environment, and the kit seems to be a good test case but still it
    would be nice with some systematic test files so as we can track
    when and how we break pm.
